uuid: e4a70624-946f-45a7-96a1-90104764b88b
projectId: relaycode
createdAt: '2025-06-22T08:17:58.410Z'
reasoning:
  - 'Of course. I''ve addressed the compilation errors. Here are the fixes:'
  - >-
    First, I'll import the missing `getErrorMessage` function in
    `src/core/state.ts` to resolve the `Cannot find name` error.
  - >-
    Second, I'll remove the unused `readFileContent` import from
    `src/core/transaction.ts`, which was left over from my previous refactoring.
  - >-
    These two small changes will correct the TypeScript errors and allow the
    project to build successfully.
operations:
  - type: write
    path: src/core/state.ts
    content: |-
      <<<<<<< SEARCH
      import { logger, isEnoentError } from '../utils/logger';
      =======
      import { logger, isEnoentError, getErrorMessage } from '../utils/logger';
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/core/transaction.ts
    content: >-
      <<<<<<< SEARCH

      import { createSnapshot, restoreSnapshot, applyOperations, readFileContent
      } from './executor';

      =======

      import { createSnapshot, restoreSnapshot, applyOperations } from
      './executor';

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/core/state.ts: >-
    import { promises as fs } from 'fs';

    import path from 'path';

    import yaml from 'js-yaml';

    import { StateFile, StateFileSchema } from '../types';

    import { STATE_DIRECTORY_NAME } from '../utils/constants';

    import { logger, isEnoentError } from '../utils/logger';

    import { fileExists, safeRename } from './executor';


    const stateDirectoryCache = new Map<string, boolean>();


    const getStateDirectory = (cwd: string) => path.resolve(cwd,
    STATE_DIRECTORY_NAME);


    export const getStateFilePath = (cwd: string, uuid: string, isPending:
    boolean): string => {
      const fileName = isPending ? `${uuid}.pending.yml` : `${uuid}.yml`;
      return path.join(getStateDirectory(cwd), fileName);
    };


    export const getUndoneStateFilePath = (cwd: string, uuid: string): string =>
    {
      const fileName = `${uuid}.yml`;
      return path.join(getStateDirectory(cwd),'undone', fileName);
    };


    // Ensure state directory exists with caching for performance

    const ensureStateDirectory = async (cwd: string): Promise<void> => {
      const dirPath = getStateDirectory(cwd);
      if (!stateDirectoryCache.has(dirPath)) {
        await fs.mkdir(dirPath, { recursive: true });
        stateDirectoryCache.set(dirPath, true);
      }
    };


    export const hasBeenProcessed = async (cwd: string, uuid: string):
    Promise<boolean> => {
      const committedPath = getStateFilePath(cwd, uuid, false);
      const undonePath = getUndoneStateFilePath(cwd, uuid);
      // Check if a transaction has been committed or undone.
      // This allows re-processing a transaction that failed and left an orphaned .pending.yml
      // because we don't check for `.pending.yml` files.
      return (await fileExists(committedPath)) || (await fileExists(undonePath));
    };


    export const writePendingState = async (cwd: string, state: StateFile):
    Promise<void> => {
      const validatedState = StateFileSchema.parse(state);
      const yamlString = yaml.dump(validatedState);
      const filePath = getStateFilePath(cwd, state.uuid, true);
      
      // Ensure directory exists (cached)
      await ensureStateDirectory(cwd);
      
      // Write file
      await fs.writeFile(filePath, yamlString, 'utf-8');
    };


    export const commitState = async (cwd: string, uuid: string): Promise<void>
    => {
      const pendingPath = getStateFilePath(cwd, uuid, true);
      const committedPath = getStateFilePath(cwd, uuid, false);
      await safeRename(pendingPath, committedPath);
    };


    export const deletePendingState = async (cwd: string, uuid: string):
    Promise<void> => {
      const pendingPath = getStateFilePath(cwd, uuid, true);
      try {
        await fs.unlink(pendingPath);
      } catch (error) {
        if (isEnoentError(error)) {
          // Already gone, that's fine.
          return;
        }
        throw error;
      }
    };


    export const readStateFile = async (cwd: string, uuid: string):
    Promise<StateFile | null> => {
      const committedPath = getStateFilePath(cwd, uuid, false);
      try {
        const fileContent = await fs.readFile(committedPath, 'utf-8');
        const yamlContent = yaml.load(fileContent);
        const parsed = StateFileSchema.safeParse(yamlContent);
        if (parsed.success) {
          return parsed.data;
        }
        logger.debug(`Could not parse state file ${committedPath}: ${parsed.error.message}`);
        return null;
      } catch (error) {
        // Can be file not found or YAML parsing error.
        // In any case, we can't get the state file.
        return null;
      }
    };


    export const readAllStateFiles = async (cwd: string = process.cwd()):
    Promise<StateFile[] | null> => {
        const stateDir = getStateDirectory(cwd);
        try {
            await fs.access(stateDir);
        } catch (e) {
            return null; // No state directory, so no transactions
        }

        const files = await fs.readdir(stateDir);
        const transactionFiles = files.filter(f => f.endsWith('.yml') && !f.endsWith('.pending.yml'));

        const promises = transactionFiles.map(async (file) => {
            const stateFile = await readStateFile(cwd, file.replace('.yml', ''));
            if (!stateFile) {
                logger.warn(`Could not read or parse state file ${file}. Skipping.`);
            }
            return stateFile;
        });

        const results = await Promise.all(promises);
        const validResults = results.filter((sf): sf is StateFile => !!sf);

        // Sort transactions by date, most recent first
        validResults.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

        return validResults;
    }


    export const findLatestStateFile = async (cwd: string = process.cwd()):
    Promise<StateFile | null> => {
        const stateDir = getStateDirectory(cwd);
        try {
            await fs.access(stateDir);
        } catch (e) {
            return null;
        }

        const files = await fs.readdir(stateDir);
        const transactionFiles = files.filter(f => f.endsWith('.yml') && !f.endsWith('.pending.yml'));

        if (transactionFiles.length === 0) {
            return null;
        }

        // Read creation date from each file without parsing the whole thing.
        // This is much faster than reading and parsing the full YAML for every file.
        const filesWithDates = await Promise.all(
            transactionFiles.map(async (file) => {
                const filePath = path.join(stateDir, file);
                let createdAt: Date | null = null;
                try {
                    // Read only the first 512 bytes to find `createdAt`. This is an optimization.
                    const fileHandle = await fs.open(filePath, 'r');
                    const buffer = Buffer.alloc(512);
                    await fileHandle.read(buffer, 0, 512, 0);
                    await fileHandle.close();
                    const content = buffer.toString('utf-8');
                    // Extract date from a line like 'createdAt: 2023-01-01T00:00:00.000Z'
                    const match = content.match(/^createdAt:\s*['"]?(.+?)['"]?$/m);
                    if (match && match[1]) {
                        createdAt = new Date(match[1]);
                    }
                } catch (error) {
                    if (!isEnoentError(error)) {
                      logger.debug(`Could not read partial date from ${file}: ${getErrorMessage(error)}`);
                    }
                }
                return { file, createdAt };
            })
        );

        const validFiles = filesWithDates.filter(f => f.createdAt instanceof Date) as { file: string; createdAt: Date }[];

        if (validFiles.length === 0) {
            // Fallback for safety, though it should be rare.
            const transactions = await readAllStateFiles(cwd);
            return transactions?.[0] ?? null;
        }

        validFiles.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

        const latestFile = validFiles[0];
        if (!latestFile) {
            return null;
        }

        // Now read the full content of only the latest file
        return readStateFile(cwd, latestFile.file.replace('.yml', ''));
    };
  src/core/transaction.ts: >-
    import { Config, ParsedLLMResponse, StateFile, FileSnapshot, FileOperation }
    from '../types';

    import { logger, getErrorMessage } from '../utils/logger';

    import { getErrorCount, executeShellCommand } from '../utils/shell';

    import { createSnapshot, restoreSnapshot, applyOperations, readFileContent }
    from './executor';

    import { hasBeenProcessed, writePendingState, commitState,
    deletePendingState } from './state';

    import { getConfirmation } from '../utils/prompt';

    import { notifyApprovalRequired, notifyFailure, notifySuccess } from
    '../utils/notifier';


    type Prompter = (question: string) => Promise<boolean>;


    type ProcessPatchOptions = {
        prompter?: Prompter;
        cwd?: string;
    };


    const calculateLineChanges = (
        op: FileOperation,
        snapshot: FileSnapshot,
        newContents: Map<string, string>
    ): { added: number; removed: number } => {
        if (op.type === 'rename') {
            return { added: 0, removed: 0 };
        }
        const oldContent = snapshot[op.path] ?? null;

        if (op.type === 'delete') {
            const oldLines = oldContent ? oldContent.split('\n') : [];
            return { added: 0, removed: oldLines.length };
        }
        
        const newContent = newContents.get(op.path) ?? null;

        if (oldContent === newContent) return { added: 0, removed: 0 };

        const oldLines = oldContent?.split('\n') ?? [];
        const newLines = newContent?.split('\n') ?? [];

        if (oldContent === null || oldContent === '') return { added: newLines.length, removed: 0 };
        if (newContent === null || newContent === '') return { added: 0, removed: oldLines.length };
        
        // This is a simplified diff, for a more accurate count a real diff algorithm is needed,
        // but this is fast and good enough for a summary.
        const oldSet = new Set(oldLines);
        const newSet = new Set(newLines);
        
        let added = 0;
        for (const line of newLines) {
            if (!oldSet.has(line)) added++;
        }

        let removed = 0;
        for (const line of oldLines) {
            if (!newSet.has(line)) removed++;
        }
        
        return { added, removed };
    };


    const logCompletionSummary = (
        uuid: string,
        startTime: number,
        operations: FileOperation[]
    ) => {
        const duration = performance.now() - startTime;

        logger.log('\nSummary:');
        logger.log(`Applied ${operations.length} file operation(s) successfully.`);
        logger.log(`Total time from start to commit: ${duration.toFixed(2)}ms`);
        logger.success(`✅ Transaction ${uuid} committed successfully!`);
    };


    const rollbackTransaction = async (cwd: string, uuid: string, snapshot:
    FileSnapshot, reason: string, enableNotifications: boolean = true):
    Promise<void> => {
        logger.warn(`Rolling back changes: ${reason}`);
        try {
            await restoreSnapshot(snapshot, cwd);
            logger.success('  - Files restored to original state.');
        } catch (error) {
            logger.error(`Fatal: Rollback failed: ${getErrorMessage(error)}`);
            // Do not rethrow; we're already in a final error handling state.
        } finally {
            try {
                await deletePendingState(cwd, uuid);
                logger.success(`↩️ Transaction ${uuid} rolled back.`);
                notifyFailure(uuid, enableNotifications);
            } catch (cleanupError) {
                logger.error(`Fatal: Could not clean up pending state for ${uuid}: ${getErrorMessage(cleanupError)}`);
            }
        }
    };


    export const processPatch = async (config: Config, parsedResponse:
    ParsedLLMResponse, options?: ProcessPatchOptions): Promise<void> => {
        const cwd = options?.cwd || process.cwd();
        const prompter = options?.prompter || getConfirmation;
        const { control, operations, reasoning } = parsedResponse;
        const { uuid, projectId } = control;
        const startTime = performance.now();

        // 1. Validation
        if (projectId !== config.projectId) {
            logger.warn(`Skipping patch: projectId mismatch (expected '${config.projectId}', got '${projectId}').`);
            return;
        }
        if (await hasBeenProcessed(cwd, uuid)) {
            logger.info(`Skipping patch: uuid '${uuid}' has already been processed.`);
            return;
        }

        // 2. Pre-flight checks
        if (config.preCommand) {
            logger.log(`  - Running pre-command: ${config.preCommand}`);
            const { exitCode, stderr } = await executeShellCommand(config.preCommand, cwd);
            if (exitCode !== 0) {
                logger.error(`Pre-command failed with exit code ${exitCode}, aborting transaction.`);
                if (stderr) logger.error(`Stderr: ${stderr}`);
                return;
            }
        }

        logger.info(`🚀 Starting transaction for patch ${uuid}...`);
        logger.log(`Reasoning:\n  ${reasoning.join('\n  ')}`);

        const affectedFilePaths = operations.reduce<string[]>((acc, op) => {
            if (op.type === 'rename') {
                acc.push(op.from, op.to);
            } else {
                acc.push(op.path);
            }
            return acc;
        }, []);
        const snapshot = await createSnapshot(affectedFilePaths, cwd);
        
        const stateFile: StateFile = {
            uuid, projectId, createdAt: new Date().toISOString(), reasoning, operations, snapshot, approved: false,
        };

        try {
            await writePendingState(cwd, stateFile);
            logger.success('  - Staged changes to .pending.yml file.');

            // Apply changes
            logger.log('  - Applying file operations...');
            const newContents = await applyOperations(operations, cwd);
            logger.success('  - File operations complete.');

            const opStats = operations.map(op => {
                const stats = calculateLineChanges(op, snapshot, newContents);
                if (op.type === 'write') {
                    logger.success(`✔ Written: ${op.path} (+${stats.added}, -${stats.removed})`);
                } else if (op.type === 'delete') {
                    logger.success(`✔ Deleted: ${op.path}`);
                } else if (op.type === 'rename') {
                    logger.success(`✔ Renamed: ${op.from} -> ${op.to}`);
                }
                return stats;
            });

            // Run post-command
            if (config.postCommand) {
                logger.log(`  - Running post-command: ${config.postCommand}`);
                const postResult = await executeShellCommand(config.postCommand, cwd);
                if (postResult.exitCode !== 0) {
                    logger.error(`Post-command failed with exit code ${postResult.exitCode}.`);
                    if (postResult.stderr) logger.error(`Stderr: ${postResult.stderr}`);
                    throw new Error('Post-command failed, forcing rollback.');
                }
            }

            // Log summary before asking for approval
            const checksDuration = performance.now() - startTime;
            const totalAdded = opStats.reduce((sum, s) => sum + s.added, 0);
            const totalRemoved = opStats.reduce((sum, s) => sum + s.removed, 0);

            logger.log('\nPre-flight summary:');
            logger.success(`Lines changed: +${totalAdded}, -${totalRemoved}`);
            logger.log(`Checks completed in ${checksDuration.toFixed(2)}ms`);

            // Check for approval
            const finalErrorCount = await getErrorCount(config.linter, cwd);
            logger.log(`  - Final linter error count: ${finalErrorCount}`);
            
            let isApproved: boolean;
            if (config.approvalMode === 'auto') { // Auto mode allows conditional auto-approval
                const canAutoApprove = finalErrorCount <= config.approvalOnErrorCount;

                if (canAutoApprove) {
                    logger.success('  - Changes automatically approved based on your configuration.');
                    isApproved = true;
                } else {
                    notifyApprovalRequired(config.projectId, config.enableNotifications);
                    isApproved = await prompter('Changes applied. Do you want to approve and commit them? (y/N)');
                }
            } else { // Manual mode always requires user approval
                logger.warn('Manual approval required because "approvalMode" is set to "manual".');
                notifyApprovalRequired(config.projectId, config.enableNotifications);
                isApproved = await prompter('Changes applied. Do you want to approve and commit them? (y/N)');
            }

            if (isApproved) {
                stateFile.approved = true;
                await writePendingState(cwd, stateFile); // Update state with approved: true before commit
                await commitState(cwd, uuid);
                logCompletionSummary(uuid, startTime, operations);
                notifySuccess(uuid, config.enableNotifications);
            } else {
                throw new Error('Changes were not approved.');
            }
        } catch (error) {
            const reason = getErrorMessage(error);
            await rollbackTransaction(cwd, uuid, snapshot, reason, config.enableNotifications);
        }
    };
approved: true
