uuid: a631b747-0610-4497-b6f7-c533e4c4ca00
projectId: relaycode
createdAt: '2025-06-23T00:08:30.758Z'
reasoning:
  - >-
    Of course! I'll add the requested `git-commit` feature. This involves
    updating your schemas, modifying the transaction processing to save the new
    fields, updating the system prompt for the LLM, and creating the new
    command.
  - 'Here are the changes:'
  - >-
    First, I'll update the type definitions to include `gitCommitMsg` and
    `promptSummary`.
  - >-
    Next, I'll modify the transaction processor to save these new fields into
    the state file.
  - >-
    I'll update the system prompt in the `watch` command to instruct the LLM to
    provide the new fields.
  - >-
    To make these new fields visible, I'll update the `log` command to display
    them.
  - Now, I'll create the new `git-commit` command.
  - I'll export the new command from the main `index.ts`.
  - Finally, I'll wire up the new `relay git commit` command in the CLI.
  - >-
    This completes the implementation of the `git-commit` feature. Let me know
    if you have any other requests!
operations:
  - type: write
    path: src/types.ts
    content: |-
      --- src/types.ts
      +++ src/types.ts
      @@ -37,6 +37,8 @@
         projectId: z.string(),
         uuid: z.string().uuid(),
         changeSummary: z.array(z.record(z.string())).optional(), // Not strictly used, but good to parse
      +  gitCommitMsg: z.string().optional(),
      +  promptSummary: z.string().optional(),
       });
       export type ControlYaml = z.infer<typeof ControlYamlSchema>;
       
      @@ -58,6 +60,8 @@
         operations: z.array(FileOperationSchema),
         snapshot: FileSnapshotSchema,
         approved: z.boolean(),
      +  gitCommitMsg: z.string().optional(),
      +  promptSummary: z.string().optional(),
       });
       export type StateFile = z.infer<typeof StateFileSchema>;
    patchStrategy: new-unified
  - type: write
    path: src/core/transaction.ts
    content: >-
      --- src/core/transaction.ts

      +++ src/core/transaction.ts

      @@ -107,8 +107,16 @@
           }, []);
           const snapshot = await createSnapshot(affectedFilePaths, cwd);
           
      -    const stateFile: StateFile = {

      -        uuid, projectId, createdAt: new Date().toISOString(), reasoning,
      operations, snapshot, approved: false,

      +    const stateFile: StateFile = {

      +        uuid,

      +        projectId,

      +        createdAt: new Date().toISOString(),

      +        reasoning,

      +        operations,

      +        snapshot,

      +        approved: false,

      +        gitCommitMsg: control.gitCommitMsg,

      +        promptSummary: control.promptSummary,
           };
       
           try {
    patchStrategy: new-unified
  - type: write
    path: src/commands/watch.ts
    content: |-
      --- src/commands/watch.ts
      +++ src/commands/watch.ts
      @@ -147,6 +147,8 @@
           changeSummary:
             - edit: src/main.ts
             - new: src/components/Button.tsx
             - delete: src/utils/old-helper.ts
      +    promptSummary: "A brief summary of my request."
      +    gitCommitMsg: "feat: A concise, imperative git commit message."
           \`\`\`
       `;
    patchStrategy: new-unified
  - type: write
    path: src/commands/log.ts
    content: |-
      --- src/commands/log.ts
      +++ src/commands/log.ts
      @@ -15,6 +15,12 @@
           if (tx.reasoning && tx.reasoning.length > 0) {
               lines.push('  Reasoning:');
               tx.reasoning.forEach(r => lines.push(`    - ${r}`));
      +    }
      +    if (tx.promptSummary) {
      +        lines.push(`  Prompt Summary: ${tx.promptSummary}`);
      +    }
      +    if (tx.gitCommitMsg) {
      +        lines.push(`  Git Commit: ${tx.gitCommitMsg}`);
           }
           if (options.showOperations && tx.operations && tx.operations.length > 0) {
               lines.push('  Changes:');
    patchStrategy: new-unified
  - type: write
    path: src/commands/git-commit.ts
    content: >-
      import { findLatestStateFile } from '../core/state';

      import { logger } from '../utils/logger';

      import { executeShellCommand } from '../utils/shell';

      import { getConfirmation as defaultGetConfirmation } from
      '../utils/prompt';

      import { formatTransactionDetails } from './log';


      type Prompter = (question: string) => Promise<boolean>;


      export const gitCommitCommand = async (cwd: string = process.cwd(),
      prompter?: Prompter): Promise<void> => {
          const getConfirmation = prompter || defaultGetConfirmation;

          logger.info('Looking for the last transaction to commit...');
          const latestTransaction = await findLatestStateFile(cwd);

          if (!latestTransaction) {
              logger.warn('No committed transactions found.');
              return;
          }

          if (!latestTransaction.gitCommitMsg) {
              logger.warn('The latest transaction does not have a git commit message.');
              logger.log('Transaction details:');
              formatTransactionDetails(latestTransaction, { showSpacing: true }).forEach(line => logger.log(line));
              return;
          }

          logger.log('Found latest transaction with commit message:');
          formatTransactionDetails(latestTransaction).forEach(line => logger.log(line));

          const confirmed = await getConfirmation(`\nDo you want to run 'git add .' and 'git commit -m "${latestTransaction.gitCommitMsg}"'? (y/N)`);
          if (!confirmed) {
              logger.info('Commit operation cancelled.');
              return;
          }

          logger.info("Running 'git add .'...");
          const addResult = await executeShellCommand('git add .', cwd);
          if (addResult.exitCode !== 0) {
              logger.error(`'git add .' failed with exit code ${addResult.exitCode}.`);
              logger.error(addResult.stderr);
              return;
          }
          logger.success("'git add .' completed successfully.");

          const commitCmd = `git commit -m "${latestTransaction.gitCommitMsg}"`;
          logger.info(`Running '${commitCmd}'...`);
          const commitResult = await executeShellCommand(commitCmd, cwd);

          if (commitResult.exitCode !== 0) {
              logger.error(`'git commit' failed with exit code ${commitResult.exitCode}.`);
              logger.error(commitResult.stderr);
              if (commitResult.stdout) logger.log(commitResult.stdout);
              logger.warn('You may need to resolve commit issues manually.');
              return;
          }
          
          logger.success('✅ Git commit successful!');
          logger.log(commitResult.stdout);
      };
    patchStrategy: replace
  - type: write
    path: src/index.ts
    content: |-
      --- src/index.ts
      +++ src/index.ts
      @@ -21,6 +21,7 @@
       export { undoCommand } from './commands/undo';
       export { revertCommand } from './commands/revert';
       export { applyCommand } from './commands/apply';
      +export { gitCommitCommand } from './commands/git-commit';
       
       // Types
       export * from './types';
    patchStrategy: new-unified
  - type: write
    path: src/cli.ts
    content: >-
      --- src/cli.ts

      +++ src/cli.ts

      @@ -5,6 +5,7 @@
       import { undoCommand } from './commands/undo';
       import { revertCommand } from './commands/revert';
       import { applyCommand } from './commands/apply';
      +import { gitCommitCommand } from './commands/git-commit';
       import { createRequire } from 'node:module';
       import { fileURLToPath } from 'node:url';
       import { dirname, join } from 'node:path';
      @@ -58,6 +59,14 @@
         command.action(cmdInfo.action);
       });
       
      +// Git command group

      +const git = program.command('git').description('Git related commands');

      +git

      +    .command('commit')

      +    .alias('c')

      +    .description('Commits the last transaction using the message from the
      transaction log.')

      +    .action(() => gitCommitCommand(process.cwd()));

      +
       program.parse(process.argv);
       
       if (!process.argv.slice(2).length) {
    patchStrategy: new-unified
snapshot:
  src/types.ts: >-
    import { z } from 'zod';


    export const LogLevelNameSchema = z.enum(['silent', 'error', 'warn', 'info',
    'debug']).default('info');

    export type LogLevelName = z.infer<typeof LogLevelNameSchema>;


    // Schema for relaycode.config.json

    export const ConfigSchema = z.object({
      projectId: z.string().min(1),
      logLevel: LogLevelNameSchema,
      clipboardPollInterval: z.number().int().positive().default(2000),
      approvalMode: z.enum(['auto', 'manual']).default('auto'),
      approvalOnErrorCount: z.number().int().min(0).default(0),
      linter: z.string().default('bun tsc --noEmit'),
      preCommand: z.string().default(''),
      postCommand: z.string().default(''),
      preferredStrategy: z.enum(['auto', 'replace', 'new-unified', 'multi-search-replace']).default('auto'),
      enableNotifications: z.boolean().default(true),
    });

    export type Config = z.infer<typeof ConfigSchema>;


    export const PatchStrategySchema = z.enum([
      'replace',
      'new-unified',
      'multi-search-replace',
      'unified',
    ]).default('replace');

    export type PatchStrategy = z.infer<typeof PatchStrategySchema>;


    // Schema for operations parsed from code blocks

    export const FileOperationSchema = z.union([
      z.object({
        type: z.literal('write'),
        path: z.string(),
        content: z.string(),
        patchStrategy: PatchStrategySchema,
      }),
      z.object({
        type: z.literal('delete'),
        path: z.string(),
      }),
      z.object({
        type: z.literal('rename'),
        from: z.string(),
        to: z.string(),
      }),
    ]);

    export type FileOperation = z.infer<typeof FileOperationSchema>;


    // Schema for the control YAML block at the end of the LLM response

    export const ControlYamlSchema = z.object({
      projectId: z.string(),
      uuid: z.string().uuid(),
      changeSummary: z.array(z.record(z.string())).optional(), // Not strictly used, but good to parse
    });

    export type ControlYaml = z.infer<typeof ControlYamlSchema>;


    // The fully parsed response from the clipboard

    export const ParsedLLMResponseSchema = z.object({
      control: ControlYamlSchema,
      operations: z.array(FileOperationSchema),
      reasoning: z.array(z.string()),
    });

    export type ParsedLLMResponse = z.infer<typeof ParsedLLMResponseSchema>;


    // Schema for the snapshot of original files

    export const FileSnapshotSchema = z.record(z.string(),
    z.string().nullable()); // path -> content | null (if file didn't exist)

    export type FileSnapshot = z.infer<typeof FileSnapshotSchema>;


    // Schema for the state file (.relaycode/{uuid}.yml or .pending.yml)

    export const StateFileSchema = z.object({
      uuid: z.string().uuid(),
      projectId: z.string(),
      createdAt: z.string().datetime(),
      reasoning: z.array(z.string()),
      operations: z.array(FileOperationSchema),
      snapshot: FileSnapshotSchema,
      approved: z.boolean(),
    });

    export type StateFile = z.infer<typeof StateFileSchema>;


    // Shell command execution result

    export const ShellCommandResultSchema = z.object({
        stdout: z.string(),
        stderr: z.string(),
        exitCode: z.number().nullable(),
    });

    export type ShellCommandResult = z.infer<typeof ShellCommandResultSchema>;
  src/core/transaction.ts: >-
    import { Config, ParsedLLMResponse, StateFile, FileSnapshot, FileOperation }
    from '../types';

    import { logger, getErrorMessage } from '../utils/logger';

    import { getErrorCount, executeShellCommand } from '../utils/shell';

    import { createSnapshot, restoreSnapshot, applyOperations } from
    './executor';

    import { hasBeenProcessed, writePendingState, commitState,
    deletePendingState } from './state';

    import { getConfirmation } from '../utils/prompt'

    import { notifyApprovalRequired, notifyFailure, notifySuccess,
    notifyPatchDetected } from '../utils/notifier';


    type Prompter = (question: string) => Promise<boolean>;


    type ProcessPatchOptions = {
        prompter?: Prompter;
        cwd?: string;
        notifyOnStart?: boolean;
    };


    const calculateLineChanges = (
        op: FileOperation,
        snapshot: FileSnapshot,
        newContents: Map<string, string>
    ): { added: number; removed: number } => {
        if (op.type === 'rename') {
            return { added: 0, removed: 0 };
        }
        const oldContent = snapshot[op.path] ?? null;

        if (op.type === 'delete') {
            const oldLines = oldContent ? oldContent.split('\n') : [];
            return { added: 0, removed: oldLines.length };
        }
        
        const newContent = newContents.get(op.path) ?? null;

        if (oldContent === newContent) return { added: 0, removed: 0 };

        const oldLines = oldContent?.split('\n') ?? [];
        const newLines = newContent?.split('\n') ?? [];

        if (oldContent === null || oldContent === '') return { added: newLines.length, removed: 0 };
        if (newContent === null || newContent === '') return { added: 0, removed: oldLines.length };
        
        // This is a simplified diff, for a more accurate count a real diff algorithm is needed,
        // but this is fast and good enough for a summary.
        const oldSet = new Set(oldLines);
        const newSet = new Set(newLines);
        
        let added = 0;
        for (const line of newLines) {
            if (!oldSet.has(line)) added++;
        }

        let removed = 0;
        for (const line of oldLines) {
            if (!newSet.has(line)) removed++;
        }
        
        return { added, removed };
    };


    const logCompletionSummary = (
        uuid: string,
        startTime: number,
        operations: FileOperation[]
    ) => {
        const duration = performance.now() - startTime;

        logger.log('\nSummary:');
        logger.log(`Applied ${operations.length} file operation(s) successfully.`);
        logger.log(`Total time from start to commit: ${duration.toFixed(2)}ms`);
        logger.success(`✅ Transaction ${uuid} committed successfully!`);
    };


    const rollbackTransaction = async (cwd: string, uuid: string, snapshot:
    FileSnapshot, reason: string, enableNotifications: boolean = true):
    Promise<void> => {
        logger.warn(`Rolling back changes: ${reason}`);
        try {
            await restoreSnapshot(snapshot, cwd);
            logger.success('  - Files restored to original state.');
        } catch (error) {
            logger.error(`Fatal: Rollback failed: ${getErrorMessage(error)}`);
            // Do not rethrow; we're already in a final error handling state.
        } finally {
            try {
                await deletePendingState(cwd, uuid);
                logger.success(`↩️ Transaction ${uuid} rolled back.`);
                notifyFailure(uuid, enableNotifications);
            } catch (cleanupError) {
                logger.error(`Fatal: Could not clean up pending state for ${uuid}: ${getErrorMessage(cleanupError)}`);
            }
        }
    };


    export const processPatch = async (config: Config, parsedResponse:
    ParsedLLMResponse, options?: ProcessPatchOptions): Promise<void> => {
        const cwd = options?.cwd || process.cwd();
        const prompter = options?.prompter || getConfirmation;
        const notifyOnStart = options?.notifyOnStart ?? false;
        const { control, operations, reasoning } = parsedResponse;
        const { uuid, projectId } = control;
        const startTime = performance.now();

        // 1. Validation
        if (projectId !== config.projectId) {
            logger.warn(`Skipping patch: projectId mismatch (expected '${config.projectId}', got '${projectId}').`);
            return;
        }
        if (await hasBeenProcessed(cwd, uuid)) {
            logger.info(`Skipping patch: uuid '${uuid}' has already been processed.`);
            return;
        }

        // Notify if coming from watch mode, now that we know it's a new patch.
        if (notifyOnStart) {
            notifyPatchDetected(config.projectId, config.enableNotifications);
            logger.success(`Valid patch detected for project '${config.projectId}'. Processing...`);
        }

        // 2. Pre-flight checks
        if (config.preCommand) {
            logger.log(`  - Running pre-command: ${config.preCommand}`);
            const { exitCode, stderr } = await executeShellCommand(config.preCommand, cwd);
            if (exitCode !== 0) {
                logger.error(`Pre-command failed with exit code ${exitCode}, aborting transaction.`);
                if (stderr) logger.error(`Stderr: ${stderr}`);
                return;
            }
        }

        logger.info(`🚀 Starting transaction for patch ${uuid}...`);
        logger.log(`Reasoning:\n  ${reasoning.join('\n  ')}`);

        const affectedFilePaths = operations.reduce<string[]>((acc, op) => {
            if (op.type === 'rename') {
                acc.push(op.from, op.to);
            } else {
                acc.push(op.path);
            }
            return acc;
        }, []);
        const snapshot = await createSnapshot(affectedFilePaths, cwd);
        
        const stateFile: StateFile = {
            uuid, projectId, createdAt: new Date().toISOString(), reasoning, operations, snapshot, approved: false,
        };

        try {
            await writePendingState(cwd, stateFile);
            logger.success('  - Staged changes to .pending.yml file.');

            // Apply changes
            logger.log('  - Applying file operations...');
            const newContents = await applyOperations(operations, cwd);
            logger.success('  - File operations complete.');

            const opStats = operations.map(op => {
                const stats = calculateLineChanges(op, snapshot, newContents);
                if (op.type === 'write') {
                    logger.success(`✔ Written: ${op.path} (+${stats.added}, -${stats.removed})`);
                } else if (op.type === 'delete') {
                    logger.success(`✔ Deleted: ${op.path}`);
                } else if (op.type === 'rename') {
                    logger.success(`✔ Renamed: ${op.from} -> ${op.to}`);
                }
                return stats;
            });

            // Run post-command
            if (config.postCommand) {
                logger.log(`  - Running post-command: ${config.postCommand}`);
                const postResult = await executeShellCommand(config.postCommand, cwd);
                if (postResult.exitCode !== 0) {
                    logger.error(`Post-command failed with exit code ${postResult.exitCode}.`);
                    if (postResult.stderr) logger.error(`Stderr: ${postResult.stderr}`);
                    throw new Error('Post-command failed, forcing rollback.');
                }
            }

            // Log summary before asking for approval
            const checksDuration = performance.now() - startTime;
            const totalAdded = opStats.reduce((sum, s) => sum + s.added, 0);
            const totalRemoved = opStats.reduce((sum, s) => sum + s.removed, 0);

            logger.log('\nPre-flight summary:');
            logger.success(`Lines changed: +${totalAdded}, -${totalRemoved}`);
            logger.log(`Checks completed in ${checksDuration.toFixed(2)}ms`);

            // Check for approval
            const finalErrorCount = await getErrorCount(config.linter, cwd);
            logger.log(`  - Final linter error count: ${finalErrorCount}`);
            
            let isApproved: boolean;
            if (config.approvalMode === 'auto') { // Auto mode allows conditional auto-approval
                const canAutoApprove = finalErrorCount <= config.approvalOnErrorCount;

                if (canAutoApprove) {
                    logger.success('  - Changes automatically approved based on your configuration.');
                    isApproved = true;
                } else {
                    notifyApprovalRequired(config.projectId, config.enableNotifications);
                    isApproved = await prompter('Changes applied. Do you want to approve and commit them? (y/N)');
                }
            } else { // Manual mode always requires user approval
                logger.warn('Manual approval required because "approvalMode" is set to "manual".');
                notifyApprovalRequired(config.projectId, config.enableNotifications);
                isApproved = await prompter('Changes applied. Do you want to approve and commit them? (y/N)');
            }

            if (isApproved) {
                stateFile.approved = true;
                await writePendingState(cwd, stateFile); // Update state with approved: true before commit
                await commitState(cwd, uuid);
                logCompletionSummary(uuid, startTime, operations);
                notifySuccess(uuid, config.enableNotifications);
            } else {
                throw new Error('Changes were not approved.');
            }
        } catch (error) {
            const reason = getErrorMessage(error);
            await rollbackTransaction(cwd, uuid, snapshot, reason, config.enableNotifications);
        }
    };
  src/commands/watch.ts: >-
    import { findConfig, loadConfigOrExit } from '../core/config';

    import { createClipboardWatcher } from '../core/clipboard';

    import { parseLLMResponse } from '../core/parser';

    import { processPatch } from '../core/transaction';

    import { logger } from '../utils/logger';

    import { CONFIG_FILE_NAME } from '../utils/constants'

    import { Config } from '../types';

    import fs from 'fs';

    import path from 'path';


    const getSystemPrompt = (projectId: string, preferredStrategy:
    Config['preferredStrategy']): string => {
        const header = `
    ✅ relaycode is watching for changes.


    IMPORTANT: For relaycode to work, you must configure your AI assistant.

    Copy the entire text below and paste it into your LLM's "System Prompt"

    or "Custom Instructions" section.

    ---------------------------------------------------------------------------`;

        const intro = `You are an expert AI programmer. To modify a file, you MUST use a code block with a specified patch strategy.`;

        const syntaxAuto = `
    **Syntax:**

    \`\`\`typescript // filePath {patchStrategy}

    ... content ...

    \`\`\`

    - \`filePath\`: The path to the file. **If the path contains spaces, it MUST
    be enclosed in double quotes.**

    - \`patchStrategy\`: (Optional) One of \`new-unified\`,
    \`multi-search-replace\`. If omitted, the entire file is replaced (this is
    the \`replace\` strategy).


    **Examples:**

    \`\`\`typescript // src/components/Button.tsx

    ...

    \`\`\`

    \`\`\`typescript // "src/components/My Component.tsx" new-unified

    ...

    \`\`\``;

        const syntaxReplace = `
    **Syntax:**

    \`\`\`typescript // filePath

    ... content ...

    \`\`\`

    - \`filePath\`: The path to the file. **If the path contains spaces, it MUST
    be enclosed in double quotes.**

    - Only the \`replace\` strategy is enabled. This means you must provide the
    ENTIRE file content for any change. This is suitable for creating new files
    or making changes to small files.`;

        const syntaxNewUnified = `
    **Syntax:**

    \`\`\`typescript // filePath new-unified

    ... diff content ...

    \`\`\`

    - \`filePath\`: The path to the file. **If the path contains spaces, it MUST
    be enclosed in double quotes.**

    - You must use the \`new-unified\` patch strategy for all modifications.`;

        const syntaxMultiSearchReplace = `
    **Syntax:**

    \`\`\`typescript // filePath multi-search-replace

    ... diff content ...

    \`\`\`

    - \`filePath\`: The path to the file. **If the path contains spaces, it MUST
    be enclosed in double quotes.**

    - You must use the \`multi-search-replace\` patch strategy for all
    modifications.`;

        const sectionNewUnified = `---

    ### Strategy 1: Advanced Unified Diff (\`new-unified\`) - RECOMMENDED


    Use for most changes, like refactoring, adding features, and fixing bugs.
    It's resilient to minor changes in the source file.


    **Diff Format:**

    1.  **File Headers**: Start with \`--- {filePath}\` and \`+++ {filePath}\`.

    2.  **Hunk Header**: Use \`@@ ... @@\`. Exact line numbers are not needed.

    3.  **Context Lines**: Include 2-3 unchanged lines before and after your
    change for context.

    4.  **Changes**: Mark additions with \`+\` and removals with \`-\`. Maintain
    indentation.


    **Example:**

    \`\`\`diff

    --- src/utils.ts

    +++ src/utils.ts

    @@ ... @@
        function calculateTotal(items: number[]): number {
    -      return items.reduce((sum, item) => {

    -        return sum + item;

    -      }, 0);

    +      const total = items.reduce((sum, item) => {

    +        return sum + item * 1.1;  // Add 10% markup

    +      }, 0);

    +      return Math.round(total * 100) / 100;  // Round to 2 decimal places

    +    }

    \`\`\`

    `;

        const sectionMultiSearchReplace = `---

    ### Strategy 2: Multi-Search-Replace (\`multi-search-replace\`)


    Use for precise, surgical replacements. The \`SEARCH\` block must be an
    exact match of the content in the file.


    **Diff Format:**

    Repeat this block for each replacement.

    \`\`\`diff

    <<<<<<< SEARCH

    :start_line: (optional)

    :end_line: (optional)

    -------

    [exact content to find including whitespace]

    =======

    [new content to replace with]

    >>>>>>> REPLACE

    \`\`\`

    `;

        const otherOps = `---

    ### Other Operations


    -   **Creating a file**: Use the default \`replace\` strategy (omit the
    strategy name) and provide the full file content.

    -   **Deleting a file**:
        \`\`\`typescript // path/to/file.ts
        //TODO: delete this file
        \`\`\`
        \`\`\`typescript // "path/to/My Old Component.ts"
        //TODO: delete this file
        \`\`\`
    -   **Renaming/Moving a file**:
        \`\`\`json // rename-file
        {
          "from": "src/old/path/to/file.ts",
          "to": "src/new/path/to/file.ts"
        }
        \`\`\`
    `;

        const finalSteps = `---

    ### Final Steps


    1.  Add your step-by-step reasoning in plain text before each code block.

    2.  ALWAYS add the following YAML block at the very end of your response.
    Use the exact projectId shown here. Generate a new random uuid for each
    response.

        \`\`\`yaml
        projectId: ${projectId}
        uuid: (generate a random uuid)
        changeSummary:
          - edit: src/main.ts
          - new: src/components/Button.tsx
          - delete: src/utils/old-helper.ts
        \`\`\`
    `;
        
        const footer = `---------------------------------------------------------------------------`;

        const syntaxMap = {
            auto: syntaxAuto,
            replace: syntaxReplace,
            'new-unified': syntaxNewUnified,
            'multi-search-replace': syntaxMultiSearchReplace,
        };

        const strategyDetailsMap = {
            auto: `${sectionNewUnified}\n${sectionMultiSearchReplace}`,
            replace: '', // Covered in 'otherOps'
            'new-unified': sectionNewUnified,
            'multi-search-replace': sectionMultiSearchReplace,
        };

        const syntax = syntaxMap[preferredStrategy] ?? syntaxMap.auto;
        const strategyDetails = strategyDetailsMap[preferredStrategy] ?? strategyDetailsMap.auto;

        return [header, intro, syntax, strategyDetails, otherOps, finalSteps, footer].filter(Boolean).join('\n');
    }


    export const watchCommand = async (cwd: string = process.cwd()): Promise<{
    stop: () => void }> => {
      let clipboardWatcher: ReturnType<typeof createClipboardWatcher> | null = null;
      const configPath = path.resolve(cwd, CONFIG_FILE_NAME);
      let debounceTimer: NodeJS.Timeout | null = null;

      const startServices = (config: Config) => {
        // Stop existing watcher if it's running
        if (clipboardWatcher) {
          clipboardWatcher.stop();
        }

        logger.setLevel(config.logLevel);
        logger.debug(`Log level set to: ${config.logLevel}`);
        logger.debug(`Preferred strategy set to: ${config.preferredStrategy}`);

        logger.log(getSystemPrompt(config.projectId, config.preferredStrategy));

        clipboardWatcher = createClipboardWatcher(config.clipboardPollInterval, async (content) => {
          logger.info('New clipboard content detected. Attempting to parse...');
          const parsedResponse = parseLLMResponse(content);

          if (!parsedResponse) {
            logger.warn('Clipboard content is not a valid relaycode patch. Ignoring.');
            return;
          }

          // Check project ID before notifying and processing.
          if (parsedResponse.control.projectId !== config.projectId) {
            logger.debug(`Ignoring patch for different project (expected '${config.projectId}', got '${parsedResponse.control.projectId}').`);
            return;
          }

          await processPatch(config, parsedResponse, { cwd, notifyOnStart: true });
          logger.info('--------------------------------------------------');
          logger.info('Watching for next patch...');
        });
      };

      const handleConfigChange = () => {
        if (debounceTimer) clearTimeout(debounceTimer);
        debounceTimer = setTimeout(async () => {
          logger.info(`Configuration file change detected. Reloading...`);
          try {
            const newConfig = await findConfig(cwd);
            if (newConfig) {
              logger.success('Configuration reloaded. Restarting services...');
              startServices(newConfig);
            } else {
              logger.error(`${CONFIG_FILE_NAME} is invalid or has been deleted. Services paused.`);
              if (clipboardWatcher) {
                clipboardWatcher.stop();
                clipboardWatcher = null;
              }
            }
          } catch (error) {
            logger.error(`Error reloading configuration: ${error instanceof Error ? error.message : String(error)}`);
          }
        }, 250);
      };

      // Initial startup
      const initialConfig = await loadConfigOrExit(cwd);
      logger.success('Configuration loaded. Starting relaycode watch...');
      startServices(initialConfig);

      // Watch for changes after initial setup
      const configWatcher = fs.watch(configPath, handleConfigChange);

      const stopAll = () => {
        if (clipboardWatcher) {
          clipboardWatcher.stop();
        }
        if (configWatcher) {
          configWatcher.close();
          logger.info('Configuration file watcher stopped.');
        }
        if (debounceTimer) {
          clearTimeout(debounceTimer);
        }
      };
      return { stop: stopAll };
    };
  src/commands/log.ts: >-
    import { logger } from '../utils/logger';

    import { FileOperation, StateFile } from '../types';

    import { readAllStateFiles } from '../core/state';

    import { STATE_DIRECTORY_NAME } from '../utils/constants';


    const opToString = (op: FileOperation): string => {
        switch (op.type) {
            case 'write': return `write: ${op.path}`;
            case 'delete': return `delete: ${op.path}`;
            case 'rename': return `rename: ${op.from} -> ${op.to}`;
        }
    };


    export const formatTransactionDetails = (
        tx: StateFile,
        options: { showOperations?: boolean, showSpacing?: boolean } = {}
    ): string[] => {
        const lines: string[] = [];
        lines.push(`- UUID: ${tx.uuid}`);
        lines.push(`  Date: ${new Date(tx.createdAt).toLocaleString()}`);
        if (tx.reasoning && tx.reasoning.length > 0) {
            lines.push('  Reasoning:');
            tx.reasoning.forEach(r => lines.push(`    - ${r}`));
        }
        if (options.showOperations && tx.operations && tx.operations.length > 0) {
            lines.push('  Changes:');
            tx.operations.forEach(op => lines.push(`    - ${opToString(op)}`));
        }
        if (options.showSpacing) {
            lines.push(''); // Newline for spacing
        }
        return lines;
    };


    export const logCommand = async (cwd: string = process.cwd(),
    outputCapture?: string[]): Promise<void> => {
        const log = (message: string) => {
            if (outputCapture) {
                outputCapture.push(message);
            } else {
                logger.log(message);
            }
        };

        const transactions = await readAllStateFiles(cwd);

        if (transactions === null) {
            log(`warn: State directory '${STATE_DIRECTORY_NAME}' not found. No logs to display.`);
            log("info: Run 'relay init' to initialize the project.");
            return;
        }

        if (transactions.length === 0) {
            log('info: No committed transactions found.');
            return;
        }

        log('Committed Transactions (most recent first):');
        log('-------------------------------------------');

        if (transactions.length === 0) {
            log('info: No valid transactions found.');
            return;
        }

        transactions.forEach(tx => {
            formatTransactionDetails(tx, { showOperations: true, showSpacing: true }).forEach(line => log(line));
        });
    };
  src/commands/git-commit.ts: null
  src/index.ts: >-
    // Core logic

    export { createClipboardWatcher } from './core/clipboard';

    export { findConfig, createConfig, getProjectId, ensureStateDirExists,
    loadConfigOrExit } from './core/config';

    export { 
        applyOperations, 
        createSnapshot, 
        deleteFile, 
        readFileContent, 
        restoreSnapshot, 
        writeFileContent 
    } from './core/executor';

    export { parseLLMResponse } from './core/parser';

    export {
        commitState,
        deletePendingState,
        hasBeenProcessed,
        findLatestStateFile,
        readStateFile,
        readAllStateFiles,
        writePendingState,
        getStateFilePath,
        getUndoneStateFilePath
    } from './core/state';

    export { processPatch } from './core/transaction';


    // Commands

    export { initCommand } from './commands/init';

    export { watchCommand } from './commands/watch';

    export { logCommand } from './commands/log';

    export { undoCommand } from './commands/undo';

    export { revertCommand } from './commands/revert';

    export { applyCommand } from './commands/apply';


    // Types

    export * from './types';


    // Utils

    export { executeShellCommand, getErrorCount } from './utils/shell';

    export { logger } from './utils/logger';

    export { getConfirmation } from './utils/prompt';
  src/cli.ts: |-
    #!/usr/bin/env node
    import { Command } from 'commander';
    import { initCommand } from './commands/init';
    import { watchCommand } from './commands/watch';
    import { logCommand } from './commands/log';
    import { COMMAND_NAME } from './utils/constants';
    import { undoCommand } from './commands/undo';
    import { revertCommand } from './commands/revert';
    import { applyCommand } from './commands/apply';
    import { createRequire } from 'node:module';
    import { fileURLToPath } from 'node:url';
    import { dirname, join } from 'node:path';

    // Default version in case we can't find the package.json
    let version = '0.0.0';

    try {
      const require = createRequire(import.meta.url);
      let pkg;
      try {
        // This works when installed as a package
        pkg = require('relaycode/package.json');
      } catch (e) {
        // Fallback for local development
        try {
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = dirname(__filename);
          pkg = require(join(__dirname, '..', 'package.json'));
        } catch (e2) {
          // ignore
        }
      }
      
      if (pkg && pkg.version) {
        version = pkg.version;
      }
    } catch (error) {
      // Fallback to default version if we can't find the package.json
      console.error('Warning: Could not determine package version', error);
    }

    const program = new Command();

    program
      .name(COMMAND_NAME)
      .version(version)
      .description('A developer assistant that automates applying code changes from LLMs.');

    const commands = [
      { name: 'init', alias: 'i', description: 'Initializes relaycode in the current project.', action: () => initCommand(process.cwd()) },
      { name: 'watch', alias: 'w', description: 'Starts watching the clipboard for code changes to apply.', action: () => { watchCommand(process.cwd()); } },
      { name: 'apply', alias: 'a', description: 'Applies a patch from a specified file.', args: { syntax: '<filePath>', description: 'The path to the file containing the patch.' }, action: (filePath: string) => applyCommand(filePath) },
      { name: 'log', alias: 'l', description: 'Displays a log of all committed transactions.', action: () => logCommand(process.cwd()) },
      { name: 'undo', alias: 'u', description: 'Reverts the last successfully committed transaction.', action: () => undoCommand(process.cwd()) },
      { name: 'revert', alias: 'r', description: 'Reverts a committed transaction by its UUID.', args: { syntax: '<uuid>', description: 'The UUID of the transaction to revert.' }, action: (uuid: string) => revertCommand(uuid) },
    ];

    commands.forEach(cmdInfo => {
      const command = program
        .command(cmdInfo.name)
        .alias(cmdInfo.alias)
        .description(cmdInfo.description);

      if (cmdInfo.args) {
        command.argument(cmdInfo.args.syntax, cmdInfo.args.description);
      }

      command.action(cmdInfo.action);
    });

    program.parse(process.argv);

    if (!process.argv.slice(2).length) {
        program.outputHelp();
    }
approved: true
