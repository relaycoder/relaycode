uuid: a692d95b-b5d1-4475-b659-f55a1d528b6d
projectId: relaycode
createdAt: '2025-06-21T18:44:22.665Z'
reasoning:
  - >-
    This is a great suggestion! Automatically detecting the patch strategy will
    make `relaycode` much easier to use with LLMs by simplifying the required
    prompt.
  - 'Here is my plan:'
  - >-
    1.  **Modify `src/core/parser.ts`**: I will update the `parseLLMResponse`
    function to implement the new strategy detection logic.
  - >-
    -   First, it will check if a strategy is explicitly provided in the code
    block header.
  - >-
    -   If no strategy is provided, it will inspect the block's content using
    the heuristics you described:
  - '-   Check for `multi-search-replace` markers (`<<<<<<< SEARCH`).'
  - '-   Check for `new-unified` diff markers (`--- `, `+++ `, `@@`).'
  - '-   If neither is found, it will default to the `replace` strategy.'
  - >-
    -   This change will be isolated to the parser, ensuring no other part of
    the application needs to be modified.
  - 'Here are the changes:'
operations:
  - type: write
    path: src/core/parser.ts
    content: >-
      --- src/core/parser.ts

      +++ src/core/parser.ts

      @@ -89,41 +89,52 @@
                   logger.debug(`Header line: ${headerLine}`);
                   matchedBlocks.push(fullMatch);
                   
                   let filePath = '';
      -            let patchStrategy: PatchStrategy;

      +            let strategyProvided = false;

      +            let patchStrategy: PatchStrategy = 'replace'; // Default
                   
                   const quotedMatch = headerLine.match(/^"(.+?)"(?:\s+(.*))?$/);
                   if (quotedMatch) {
                       filePath = quotedMatch[1]!;
      -                const strategyStr = quotedMatch[2] || '';

      -                const parsedStrategy =
      PatchStrategySchema.safeParse(strategyStr || undefined);

      -                if (!parsedStrategy.success) {

      -                    logger.debug('Invalid patch strategy for quoted path,
      skipping');

      -                    continue;

      +                const strategyStr = (quotedMatch[2] || '').trim();

      +                if (strategyStr) {

      +                    const parsedStrategy =
      PatchStrategySchema.safeParse(strategyStr);

      +                    if (!parsedStrategy.success) {

      +                        logger.debug('Invalid patch strategy for quoted
      path, skipping');

      +                        continue;

      +                    }

      +                    patchStrategy = parsedStrategy.data;

      +                    strategyProvided = true;
                       }
      -                patchStrategy = parsedStrategy.data;
                   } else {
                       const parts = headerLine.split(/\s+/);
                       if (parts.length > 1) {
      -                    const strategyStr = parts.pop()!;

      -                    const parsedStrategy =
      PatchStrategySchema.safeParse(strategyStr);

      +                    const potentialStrategy = parts[parts.length - 1]; //
      peek

      +                    const parsedStrategy =
      PatchStrategySchema.safeParse(potentialStrategy);
                           if (!parsedStrategy.success) {
      -                        logger.debug('Invalid patch strategy, skipping');

      -                        continue;

      +                        filePath = parts.join(' ');

      +                    } else {

      +                        parts.pop(); // consume

      +                        patchStrategy = parsedStrategy.data;

      +                        strategyProvided = true;

      +                        filePath = parts.join(' ');
                           }
      -                    patchStrategy = parsedStrategy.data;

      -                    filePath = parts.join(' ');
                       } else {
                           filePath = headerLine;
      -                    patchStrategy = PatchStrategySchema.parse(undefined);
                       }
                   }
       
      +            if (!strategyProvided) {

      +                if (content.includes('<<<<<<< SEARCH')) {

      +                    patchStrategy = 'multi-search-replace';

      +                    logger.debug('Inferred patch strategy:
      multi-search-replace');

      +                } else if (content.startsWith('--- ') &&
      content.includes('+++ ') && content.includes('@@')) {

      +                    patchStrategy = 'new-unified';

      +                    logger.debug('Inferred patch strategy: new-unified');

      +                }

      +            }

      +
                   logger.debug(`File path: ${filePath}`);
                   logger.debug(`Patch strategy: ${patchStrategy}`);
    patchStrategy: new-unified
snapshot:
  src/core/parser.ts: "import yaml from 'js-yaml';\r\nimport { z } from 'zod';\r\nimport {\r\n    ControlYamlSchema,\r\n    FileOperation,\r\n    ParsedLLMResponse,\r\n    ParsedLLMResponseSchema,\r\n    PatchStrategy,\r\n    PatchStrategySchema,\r\n} from '../types';\r\nimport {\r\n    CODE_BLOCK_START_MARKER,\r\n    CODE_BLOCK_END_MARKER,\r\n    DELETE_FILE_MARKER\r\n} from '../utils/constants';\r\nimport { logger } from '../utils/logger';\r\n\r\nconst CODE_BLOCK_REGEX = /```(?:\\w+)?(?:\\s*\\/\\/\\s*(.*?)|\\s+(.*?))?[\\r\\n]([\\s\\S]*?)[\\r\\n]```/g;\r\nconst YAML_BLOCK_REGEX = /```yaml[\\r\\n]([\\s\\S]+?)```/;\r\n\r\nconst extractCodeBetweenMarkers = (content: string): string => {\r\n    const startMarkerIndex = content.indexOf(CODE_BLOCK_START_MARKER);\r\n    const endMarkerIndex = content.lastIndexOf(CODE_BLOCK_END_MARKER);\r\n\r\n    if (startMarkerIndex === -1 || endMarkerIndex === -1 || endMarkerIndex <= startMarkerIndex) {\r\n        // Normalize line endings to Unix-style \\n for consistency\r\n        return content.trim().replace(/\\r\\n/g, '\\n');\r\n    }\r\n\r\n    const startIndex = startMarkerIndex + CODE_BLOCK_START_MARKER.length;\r\n    // Normalize line endings to Unix-style \\n for consistency\r\n    return content.substring(startIndex, endMarkerIndex).trim().replace(/\\r\\n/g, '\\n');\r\n};\r\n\r\nexport const parseLLMResponse = (rawText: string): ParsedLLMResponse | null => {\r\n    try {\r\n        logger.debug('Parsing LLM response...');\r\n        const yamlMatch = rawText.match(YAML_BLOCK_REGEX);\r\n        logger.debug(`YAML match: ${yamlMatch ? 'Found' : 'Not found'}`);\r\n        if (!yamlMatch || typeof yamlMatch[1] !== 'string') {\r\n            logger.debug('No YAML block found or match[1] is not a string');\r\n            return null;\r\n        }\r\n\r\n        let control;\r\n        try {\r\n            const yamlContent = yaml.load(yamlMatch[1]);\r\n            logger.debug(`YAML content parsed: ${JSON.stringify(yamlContent)}`);\r\n            control = ControlYamlSchema.parse(yamlContent);\r\n            logger.debug(`Control schema parsed: ${JSON.stringify(control)}`);\r\n        } catch (e) {\r\n            logger.debug(`Error parsing YAML or control schema: ${e}`);\r\n            return null;\r\n        }\r\n\r\n        const textWithoutYaml = rawText.replace(YAML_BLOCK_REGEX, '').trim();\r\n        \r\n        const operations: FileOperation[] = [];\r\n        const matchedBlocks: string[] = [];\r\n        \r\n        let match;\r\n        logger.debug('Looking for code blocks...');\r\n        let blockCount = 0;\r\n        while ((match = CODE_BLOCK_REGEX.exec(textWithoutYaml)) !== null) {\r\n            blockCount++;\r\n            logger.debug(`Found code block #${blockCount}`);\r\n            const [fullMatch, commentHeaderLine, spaceHeaderLine, rawContent] = match;\r\n\r\n            // Get the header line from either the comment style or space style\r\n            const headerLineUntrimmed = commentHeaderLine || spaceHeaderLine || '';\r\n            \r\n            if (typeof headerLineUntrimmed !== 'string' || typeof rawContent !== 'string') {\r\n                logger.debug('Header line or raw content is not a string, skipping');\r\n                continue;\r\n            }\r\n\r\n            const headerLine = headerLineUntrimmed.trim();\r\n            const content = rawContent.trim();\r\n\r\n            // Handle rename operation as a special case\r\n            if (headerLine === 'rename-file') {\r\n                logger.debug(`Found rename-file operation`);\r\n                matchedBlocks.push(fullMatch);\r\n                try {\r\n                    const renameData = JSON.parse(content);\r\n                    const RenameFileContentSchema = z.object({ from: z.string().min(1), to: z.string().min(1) });\r\n                    const renameOp = RenameFileContentSchema.parse(renameData);\r\n                    operations.push({ type: 'rename', from: renameOp.from, to: renameOp.to });\r\n                } catch (e) {\r\n                    logger.debug(`Invalid rename operation content, skipping: ${e instanceof Error ? e.message : String(e)}`);\r\n                }\r\n                continue;\r\n            }\r\n\r\n\r\n            if (headerLine === '') {\r\n                logger.debug('Empty header line, skipping');\r\n                continue;\r\n            }\r\n\r\n            logger.debug(`Header line: ${headerLine}`);\r\n            matchedBlocks.push(fullMatch);\r\n            \r\n            let filePath = '';\r\n            let patchStrategy: PatchStrategy;\r\n            \r\n            const quotedMatch = headerLine.match(/^\"(.+?)\"(?:\\s+(.*))?$/);\r\n            if (quotedMatch) {\r\n                filePath = quotedMatch[1]!;\r\n                const strategyStr = quotedMatch[2] || '';\r\n                const parsedStrategy = PatchStrategySchema.safeParse(strategyStr || undefined);\r\n                if (!parsedStrategy.success) {\r\n                    logger.debug('Invalid patch strategy for quoted path, skipping');\r\n                    continue;\r\n                }\r\n                patchStrategy = parsedStrategy.data;\r\n            } else {\r\n                const parts = headerLine.split(/\\s+/);\r\n                if (parts.length > 1) {\r\n                    const strategyStr = parts.pop()!;\r\n                    const parsedStrategy = PatchStrategySchema.safeParse(strategyStr);\r\n                    if (!parsedStrategy.success) {\r\n                        logger.debug('Invalid patch strategy, skipping');\r\n                        continue;\r\n                    }\r\n                    patchStrategy = parsedStrategy.data;\r\n                    filePath = parts.join(' ');\r\n                } else {\r\n                    filePath = headerLine;\r\n                    patchStrategy = PatchStrategySchema.parse(undefined);\r\n                }\r\n            }\r\n\r\n            logger.debug(`File path: ${filePath}`);\r\n            logger.debug(`Patch strategy: ${patchStrategy}`);\r\n            \r\n            if (!filePath) {\r\n                logger.debug('Empty file path, skipping');\r\n                continue;\r\n            }\r\n\r\n            if (content === DELETE_FILE_MARKER) {\r\n                logger.debug(`Adding delete operation for: ${filePath}`);\r\n                operations.push({ type: 'delete', path: filePath });\r\n            } else {\r\n                const cleanContent = extractCodeBetweenMarkers(content);\r\n                logger.debug(`Adding write operation for: ${filePath}`);\r\n                operations.push({ \r\n                    type: 'write', \r\n                    path: filePath, \r\n                    content: cleanContent, \r\n                    patchStrategy \r\n                });\r\n            }\r\n        }\r\n        \r\n        logger.debug(`Found ${blockCount} code blocks, ${operations.length} operations`);\r\n        \r\n        let reasoningText = textWithoutYaml;\r\n        for (const block of matchedBlocks) {\r\n            reasoningText = reasoningText.replace(block, '');\r\n        }\r\n        const reasoning = reasoningText.split('\\n').map(line => line.trim()).filter(Boolean);\r\n\r\n        if (operations.length === 0) {\r\n            logger.debug('No operations found, returning null');\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const parsedResponse = ParsedLLMResponseSchema.parse({\r\n                control,\r\n                operations,\r\n                reasoning,\r\n            });\r\n            logger.debug('Successfully parsed LLM response');\r\n            return parsedResponse;\r\n        } catch (e) {\r\n            logger.debug(`Error parsing final response schema: ${e}`);\r\n            return null;\r\n        }\r\n    } catch (e) {\r\n        if (e instanceof z.ZodError) {\r\n            logger.debug(`ZodError: ${JSON.stringify(e.errors)}`);\r\n        } else {\r\n            logger.debug(`Unexpected error: ${e}`);\r\n        }\r\n        return null;\r\n    }\r\n};"
approved: true
