uuid: a1d3a6c9-e85d-4f1b-8c81-540c9502b48e
projectId: relaycode
createdAt: '2025-06-24T02:11:23.135Z'
gitCommitMsg: 'feat: add auto git branch creation on successful transaction'
promptSummary: >-
  Implement a new feature for automatic Git branch creation on successful
  transactions, configurable via relaycode.config.json.
reasoning:
  - >-
    Excellent! I will now implement the Git-aware operations feature. This will
    introduce an option to automatically create a new Git branch for each
    successful transaction. Here are the changes I'll be making:
  - >-
    1.  **Configuration Update**: I'll add `autoGitBranch`, `gitBranchPrefix`,
    and `gitBranchTemplate` to your `relaycode.config.json` and type
    definitions, allowing you to enable and customize this feature.
  - >-
    2.  **Core Logic**: The transaction processor will be updated to create and
    switch to a new branch upon successful patch application if `autoGitBranch`
    is enabled.
  - >-
    3.  **User Guidance**: The `init` command's help message will be updated to
    inform users about this new Git integration feature.
  - 'Here are the precise code modifications:'
  - >-
    I'll start by updating the `ConfigSchema` in `src/types.ts` to include the
    new Git-related configuration options with sensible defaults.
  - >-
    Next, I'll update the main transaction processing logic in
    `src/core/transaction.ts`. After a transaction is successfully approved, it
    will now check if `autoGitBranch` is enabled and, if so, create a new
    branch.
  - >-
    To make users aware of the new feature, I'll add a note to the message shown
    by the `init` command in `src/commands/init.ts`.
  - >-
    Finally, I'll update the default `relaycode.config.json` to include the new
    options, ensuring new projects can easily discover and use them.
  - >-
    These changes complete the implementation of the automatic Git branching
    feature. Let me know if you have any other requests!
operations:
  - type: write
    path: src/types.ts
    content: |-
      <<<<<<< SEARCH
      export const ConfigSchema = z.object({
        projectId: z.string().min(1),
        logLevel: LogLevelNameSchema,
        clipboardPollInterval: z.number().int().positive().default(2000),
        approvalMode: z.enum(['auto', 'manual']).default('auto'),
        approvalOnErrorCount: z.number().int().min(0).default(0),
        linter: z.string().default('bun tsc --noEmit'),
        preCommand: z.string().default(''),
        postCommand: z.string().default(''),
        preferredStrategy: z.enum(['auto', 'replace', 'new-unified', 'multi-search-replace']).default('auto'),
        enableNotifications: z.boolean().default(true),
      });
      =======
      export const ConfigSchema = z.object({
        projectId: z.string().min(1),
        logLevel: LogLevelNameSchema,
        clipboardPollInterval: z.number().int().positive().default(2000),
        approvalMode: z.enum(['auto', 'manual']).default('auto'),
        approvalOnErrorCount: z.number().int().min(0).default(0),
        linter: z.string().default('bun tsc --noEmit'),
        preCommand: z.string().default(''),
        postCommand: z.string().default(''),
        preferredStrategy: z.enum(['auto', 'replace', 'new-unified', 'multi-search-replace']).default('auto'),
        enableNotifications: z.boolean().default(true),
        autoGitBranch: z.boolean().default(false),
        gitBranchPrefix: z.string().default('relay/'),
        gitBranchTemplate: z.enum(['uuid', 'gitCommitMsg']).default('gitCommitMsg'),
      });
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/core/transaction.ts
    content: |-
      <<<<<<< SEARCH
                  await commitState(cwd, uuid);
                  logCompletionSummary(uuid, startTime, operations);
                  notifySuccess(uuid, config.enableNotifications);
              } else {
                  throw new Error('Changes were not approved.');
              }
      =======
                  await commitState(cwd, uuid);
                  logCompletionSummary(uuid, startTime, operations);
                  notifySuccess(uuid, config.enableNotifications);

                  if (config.autoGitBranch) {
                      let branchNameSegment = '';
                      if (config.gitBranchTemplate === 'gitCommitMsg' && stateFile.gitCommitMsg) {
                          branchNameSegment = stateFile.gitCommitMsg;
                      } else {
                          branchNameSegment = stateFile.uuid;
                      }
                  
                      const sanitizedSegment = branchNameSegment
                          .trim()
                          .toLowerCase()
                          .replace(/[^\w\s-]/g, '') // Remove all non-word, non-space, non-hyphen chars
                          .replace(/[\s_]+/g, '-') // Replace spaces and underscores with a single hyphen
                          .replace(/-+/g, '-') // Collapse consecutive hyphens
                          .replace(/^-|-$/g, '') // Trim leading/trailing hyphens
                          .slice(0, 70); // Truncate
                  
                      if (sanitizedSegment) {
                          const branchName = `${config.gitBranchPrefix}${sanitizedSegment}`;
                          logger.info(`Creating and switching to new git branch: ${chalk.magenta(branchName)}`);
                          const command = `git checkout -b "${branchName}"`;
                          const result = await executeShellCommand(command, cwd);
                          if (result.exitCode === 0) {
                              logger.success(`Successfully created and switched to branch '${chalk.magenta(branchName)}'.`);
                          } else {
                              logger.warn(`Could not create branch '${chalk.magenta(branchName)}'. It might already exist.`);
                              logger.debug(`'${command}' failed with: ${result.stderr}`);
                          }
                      } else {
                          logger.warn('Could not generate a branch name segment from commit message or UUID. Skipping git branch creation.');
                      }
                  }
              } else {
                  throw new Error('Changes were not approved.');
              }
      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
  - type: write
    path: src/commands/init.ts
    content: >-
      <<<<<<< SEARCH
         - ${chalk.yellow("'new-unified'")}: Forces the AI to use diffs, great for most changes.
         - ${chalk.yellow("'replace'")}: Forces the AI to replace entire files, good for new files or small changes.
         - ${chalk.yellow("'multi-search-replace'")}: Forces the AI to perform precise search and replace operations.

      ${chalk.gray('2.')} Run ${chalk.magenta("'relay watch'")} in your
      terminal. This will start the service and display the system prompt
      tailored to your configuration.

      =======
         - ${chalk.yellow("'new-unified'")}: Forces the AI to use diffs, great for most changes.
         - ${chalk.yellow("'replace'")}: Forces the AI to replace entire files, good for new files or small changes.
         - ${chalk.yellow("'multi-search-replace'")}: Forces the AI to perform precise search and replace operations.
         - For Git users, enable ${chalk.yellow("'autoGitBranch'")} to create a new branch for each transaction.

      ${chalk.gray('2.')} Run ${chalk.magenta("'relay watch'")} in your
      terminal. This will start the service and display the system prompt
      tailored to your configuration.

      >>>>>>> REPLACE
    patchStrategy: multi-search-replace
snapshot:
  src/types.ts: >-
    import { z } from 'zod';


    export const LogLevelNameSchema = z.enum(['silent', 'error', 'warn', 'info',
    'debug']).default('info');

    export type LogLevelName = z.infer<typeof LogLevelNameSchema>;


    // Schema for relaycode.config.json

    export const ConfigSchema = z.object({
      projectId: z.string().min(1),
      logLevel: LogLevelNameSchema,
      clipboardPollInterval: z.number().int().positive().default(2000),
      approvalMode: z.enum(['auto', 'manual']).default('auto'),
      approvalOnErrorCount: z.number().int().min(0).default(0),
      linter: z.string().default('bun tsc --noEmit'),
      preCommand: z.string().default(''),
      postCommand: z.string().default(''),
      preferredStrategy: z.enum(['auto', 'replace', 'new-unified', 'multi-search-replace']).default('auto'),
      enableNotifications: z.boolean().default(true),
    });

    export type Config = z.infer<typeof ConfigSchema>;


    export const PatchStrategySchema = z.enum([
      'replace',
      'new-unified',
      'multi-search-replace',
      'unified',
    ]).default('replace');

    export type PatchStrategy = z.infer<typeof PatchStrategySchema>;


    // Schema for operations parsed from code blocks

    export const FileOperationSchema = z.union([
      z.object({
        type: z.literal('write'),
        path: z.string(),
        content: z.string(),
        patchStrategy: PatchStrategySchema,
      }),
      z.object({
        type: z.literal('delete'),
        path: z.string(),
      }),
      z.object({
        type: z.literal('rename'),
        from: z.string(),
        to: z.string(),
      }),
    ]);

    export type FileOperation = z.infer<typeof FileOperationSchema>;


    // Schema for the control YAML block at the end of the LLM response

    export const ControlYamlSchema = z.object({
      projectId: z.string(),
      uuid: z.string().uuid(),
      changeSummary: z.array(z.record(z.string())).optional(), // Not strictly used, but good to parse
      gitCommitMsg: z.string().optional(),
      promptSummary: z.string().optional(),
    });

    export type ControlYaml = z.infer<typeof ControlYamlSchema>;


    // The fully parsed response from the clipboard

    export const ParsedLLMResponseSchema = z.object({
      control: ControlYamlSchema,
      operations: z.array(FileOperationSchema),
      reasoning: z.array(z.string()),
    });

    export type ParsedLLMResponse = z.infer<typeof ParsedLLMResponseSchema>;


    // Schema for the snapshot of original files

    export const FileSnapshotSchema = z.record(z.string(),
    z.string().nullable()); // path -> content | null (if file didn't exist)

    export type FileSnapshot = z.infer<typeof FileSnapshotSchema>;


    // Schema for the state file (.relaycode/{uuid}.yml or .pending.yml)

    export const StateFileSchema = z.object({
      uuid: z.string().uuid(),
      projectId: z.string(),
      createdAt: z.string().datetime(),
      gitCommitMsg: z.string().optional(),
      promptSummary: z.string().optional(),
      reasoning: z.array(z.string()),
      operations: z.array(FileOperationSchema),
      snapshot: FileSnapshotSchema,
      approved: z.boolean(),
    });

    export type StateFile = z.infer<typeof StateFileSchema>;


    // Shell command execution result

    export const ShellCommandResultSchema = z.object({
        stdout: z.string(),
        stderr: z.string(),
        exitCode: z.number().nullable(),
    });

    export type ShellCommandResult = z.infer<typeof ShellCommandResultSchema>;
  src/core/transaction.ts: >-
    import { Config, ParsedLLMResponse, StateFile, FileSnapshot, FileOperation }
    from '../types';

    import { logger, getErrorMessage } from '../utils/logger';

    import { getErrorCount, executeShellCommand } from '../utils/shell';

    import { createSnapshot, restoreSnapshot, applyOperations } from
    './executor';

    import chalk from 'chalk';

    import { hasBeenProcessed, writePendingState, commitState,
    deletePendingState } from './state';

    import { getConfirmation } from '../utils/prompt'

    import { notifyApprovalRequired, notifyFailure, notifySuccess,
    notifyPatchDetected } from '../utils/notifier';


    type Prompter = (question: string) => Promise<boolean>;


    type ProcessPatchOptions = {
        prompter?: Prompter;
        cwd?: string;
        notifyOnStart?: boolean;
    };


    const calculateLineChanges = (
        op: FileOperation,
        snapshot: FileSnapshot,
        newContents: Map<string, string>
    ): { added: number; removed: number } => {
        if (op.type === 'rename') {
            return { added: 0, removed: 0 };
        }
        const oldContent = snapshot[op.path] ?? null;

        if (op.type === 'delete') {
            const oldLines = oldContent ? oldContent.split('\n') : [];
            return { added: 0, removed: oldLines.length };
        }
        
        const newContent = newContents.get(op.path) ?? null;

        if (oldContent === newContent) return { added: 0, removed: 0 };

        const oldLines = oldContent?.split('\n') ?? [];
        const newLines = newContent?.split('\n') ?? [];

        if (oldContent === null || oldContent === '') return { added: newLines.length, removed: 0 };
        if (newContent === null || newContent === '') return { added: 0, removed: oldLines.length };
        
        // This is a simplified diff, for a more accurate count a real diff algorithm is needed,
        // but this is fast and good enough for a summary.
        const oldSet = new Set(oldLines);
        const newSet = new Set(newLines);
        
        let added = 0;
        for (const line of newLines) {
            if (!oldSet.has(line)) added++;
        }

        let removed = 0;
        for (const line of oldLines) {
            if (!newSet.has(line)) removed++;
        }
        
        return { added, removed };
    };


    const logCompletionSummary = (
        uuid: string,
        startTime: number,
        operations: FileOperation[]
    ) => {
        const duration = performance.now() - startTime;

        logger.log(chalk.bold('\nSummary:'));
        logger.log(`Applied ${chalk.cyan(operations.length)} file operation(s) successfully.`);
        logger.log(`Total time from start to commit: ${chalk.gray(`${duration.toFixed(2)}ms`)}`);
        logger.success(`✅ Transaction ${chalk.gray(uuid)} committed successfully!`);
    };


    const rollbackTransaction = async (cwd: string, uuid: string, snapshot:
    FileSnapshot, reason: string, enableNotifications: boolean = true):
    Promise<void> => {
        logger.warn(`Rolling back changes: ${reason}`);
        try {
            await restoreSnapshot(snapshot, cwd);
            logger.success('  - Files restored to original state.');
        } catch (error) {
            logger.error(`Fatal: Rollback failed: ${getErrorMessage(error)}`);
            // Do not rethrow; we're already in a final error handling state.
        } finally {
            try {
                await deletePendingState(cwd, uuid);
                logger.success(`↩️ Transaction ${chalk.gray(uuid)} rolled back.`);
                notifyFailure(uuid, enableNotifications);
            } catch (cleanupError) {
                logger.error(`Fatal: Could not clean up pending state for ${chalk.gray(uuid)}: ${getErrorMessage(cleanupError)}`);
            }
        }
    };


    export const processPatch = async (config: Config, parsedResponse:
    ParsedLLMResponse, options?: ProcessPatchOptions): Promise<void> => {
        const cwd = options?.cwd || process.cwd();
        const prompter = options?.prompter || getConfirmation;
        const notifyOnStart = options?.notifyOnStart ?? false;
        const { control, operations, reasoning } = parsedResponse;
        const { uuid, projectId } = control;
        const startTime = performance.now();

        // 1. Validation
        if (projectId !== config.projectId) {
            logger.warn(`Skipping patch: projectId mismatch (expected '${chalk.cyan(config.projectId)}', got '${chalk.cyan(projectId)}').`);
            return;
        }
        if (await hasBeenProcessed(cwd, uuid)) {
            logger.info(`Skipping patch: uuid '${chalk.gray(uuid)}' has already been processed.`);
            return;
        }

        // Notify if coming from watch mode, now that we know it's a new patch.
        if (notifyOnStart) {
            notifyPatchDetected(config.projectId, config.enableNotifications);
            logger.success(`Valid patch detected for project '${chalk.cyan(config.projectId)}'. Processing...`);
        }

        // 2. Pre-flight checks
        if (config.preCommand) {
            logger.log(`  - Running pre-command: ${chalk.magenta(config.preCommand)}`);
            const { exitCode, stderr } = await executeShellCommand(config.preCommand, cwd);
            if (exitCode !== 0) {
                logger.error(`Pre-command failed with exit code ${chalk.red(exitCode)}, aborting transaction.`);
                if (stderr) logger.error(`Stderr: ${stderr}`);
                return;
            }
        }

        logger.info(`🚀 Starting transaction for patch ${chalk.gray(uuid)}...`);
        logger.log(`${chalk.bold('Reasoning:')}\n  ${reasoning.join('\n  ')}`);

        const affectedFilePaths = operations.reduce<string[]>((acc, op) => {
            if (op.type === 'rename') {
                acc.push(op.from, op.to);
            } else {
                acc.push(op.path);
            }
            return acc;
        }, []);
        const snapshot = await createSnapshot(affectedFilePaths, cwd);
        
        const stateFile: StateFile = {
            uuid,
            projectId,
            createdAt: new Date().toISOString(),
            gitCommitMsg: control.gitCommitMsg,
            promptSummary: control.promptSummary,
            reasoning,
            operations,
            snapshot,
            approved: false,
        };

        try {
            await writePendingState(cwd, stateFile);
            logger.success('  - Staged changes to .pending.yml file.');

            // Apply changes
            logger.log('  - Applying file operations...');
            const newContents = await applyOperations(operations, cwd);
            logger.success('  - File operations complete.');

            const opStats = operations.map(op => {
                const stats = calculateLineChanges(op, snapshot, newContents);
                if (op.type === 'write') {
                    logger.success(`✔ Written: ${chalk.cyan(op.path)} (${chalk.green(`+${stats.added}`)}, ${chalk.red(`-${stats.removed}`)})`);
                } else if (op.type === 'delete') {
                    logger.success(`✔ Deleted: ${chalk.cyan(op.path)}`);
                } else if (op.type === 'rename') {
                    logger.success(`✔ Renamed: ${chalk.cyan(op.from)} -> ${chalk.cyan(op.to)}`);
                }
                return stats;
            });

            // Run post-command
            if (config.postCommand) {
                logger.log(`  - Running post-command: ${chalk.magenta(config.postCommand)}`);
                const postResult = await executeShellCommand(config.postCommand, cwd);
                if (postResult.exitCode !== 0) {
                    logger.error(`Post-command failed with exit code ${chalk.red(postResult.exitCode)}.`);
                    if (postResult.stderr) logger.error(`Stderr: ${postResult.stderr}`);
                    throw new Error('Post-command failed, forcing rollback.');
                }
            }

            // Log summary before asking for approval
            const checksDuration = performance.now() - startTime;
            const totalAdded = opStats.reduce((sum, s) => sum + s.added, 0);
            const totalRemoved = opStats.reduce((sum, s) => sum + s.removed, 0);

            logger.log(chalk.bold('\nPre-flight summary:'));
            logger.success(`Lines changed: ${chalk.green(`+${totalAdded}`)}, ${chalk.red(`-${totalRemoved}`)}`);
            logger.log(`Checks completed in ${chalk.gray(`${checksDuration.toFixed(2)}ms`)}`);

            // Check for approval
            const finalErrorCount = await getErrorCount(config.linter, cwd);
            logger.log(`  - Final linter error count: ${finalErrorCount > 0 ? chalk.red(finalErrorCount) : chalk.green(finalErrorCount)}`);
            
            let isApproved: boolean;
            if (config.approvalMode === 'auto') { // Auto mode allows conditional auto-approval
                const canAutoApprove = finalErrorCount <= config.approvalOnErrorCount;

                if (canAutoApprove) {
                    logger.success('  - Changes automatically approved based on your configuration.');
                    isApproved = true;
                } else {
                    notifyApprovalRequired(config.projectId, config.enableNotifications);
                    isApproved = await prompter('Changes applied. Do you want to approve and commit them? (y/N)');
                }
            } else { // Manual mode always requires user approval
                logger.warn('Manual approval required because "approvalMode" is set to "manual".');
                notifyApprovalRequired(config.projectId, config.enableNotifications);
                isApproved = await prompter('Changes applied. Do you want to approve and commit them? (y/N)');
            }

            if (isApproved) {
                stateFile.approved = true;
                await writePendingState(cwd, stateFile); // Update state with approved: true before commit
                await commitState(cwd, uuid);
                logCompletionSummary(uuid, startTime, operations);
                notifySuccess(uuid, config.enableNotifications);
            } else {
                throw new Error('Changes were not approved.');
            }
        } catch (error) {
            const reason = getErrorMessage(error);
            await rollbackTransaction(cwd, uuid, snapshot, reason, config.enableNotifications);
        }
    };
  src/commands/init.ts: >-
    import { promises as fs } from 'fs';

    import path from 'path';

    import { findConfig, createConfig, ensureStateDirExists, getProjectId } from
    '../core/config';

    import { logger, getErrorMessage, isEnoentError } from '../utils/logger';

    import { CONFIG_FILE_NAME, STATE_DIRECTORY_NAME, GITIGNORE_FILE_NAME,
    GITIGNORE_COMMENT } from '../utils/constants';

    import chalk from 'chalk';


    const getInitMessage = (projectId: string): string => `

    ${chalk.green('✅ relaycode has been initialized for this project.')}


    Configuration file created: ${chalk.cyan(CONFIG_FILE_NAME)}


    Project ID: ${chalk.cyan(projectId)}


    ${chalk.bold('Next steps:')}

    ${chalk.gray('1.')} (Optional) Open ${chalk.cyan(CONFIG_FILE_NAME)} to
    customize settings like ${chalk.yellow("'preferredStrategy'")} to control
    how the AI generates code patches.
       - ${chalk.yellow("'auto'")} (default): The AI can choose the best patch strategy.
       - ${chalk.yellow("'new-unified'")}: Forces the AI to use diffs, great for most changes.
       - ${chalk.yellow("'replace'")}: Forces the AI to replace entire files, good for new files or small changes.
       - ${chalk.yellow("'multi-search-replace'")}: Forces the AI to perform precise search and replace operations.

    ${chalk.gray('2.')} Run ${chalk.magenta("'relay watch'")} in your terminal.
    This will start the service and display the system prompt tailored to your
    configuration.


    ${chalk.gray('3.')} Copy the system prompt provided by
    ${chalk.magenta("'relay watch'")} and paste it into your AI assistant's
    "System Prompt" or "Custom Instructions".

    `;



    const updateGitignore = async (cwd: string): Promise<void> => {
        const gitignorePath = path.join(cwd, GITIGNORE_FILE_NAME);
        const entry = `\n${GITIGNORE_COMMENT}\n/${STATE_DIRECTORY_NAME}/\n`;

        try {
            let content = await fs.readFile(gitignorePath, 'utf-8');
            if (!content.includes(STATE_DIRECTORY_NAME)) {
                content += entry;
                await fs.writeFile(gitignorePath, content);
                logger.info(`Updated ${chalk.cyan(GITIGNORE_FILE_NAME)} to ignore ${chalk.cyan(STATE_DIRECTORY_NAME)}/`);
            }
        } catch (error) {
            if (isEnoentError(error)) {
                await fs.writeFile(gitignorePath, entry.trim());
                logger.info(`Created ${chalk.cyan(GITIGNORE_FILE_NAME)} and added ${chalk.cyan(STATE_DIRECTORY_NAME)}/`);
            } else {
                logger.error(`Failed to update ${chalk.cyan(GITIGNORE_FILE_NAME)}: ${getErrorMessage(error)}`);
            }
        }
    };


    export const initCommand = async (cwd: string = process.cwd()):
    Promise<void> => {
        logger.info('Initializing relaycode in this project...');

        const config = await findConfig(cwd);
        if (config) {
            logger.warn(`${chalk.cyan(CONFIG_FILE_NAME)} already exists. Initialization skipped.`);
            logger.log(`
    To use relaycode, please run ${chalk.magenta("'relay watch'")}.

    It will display a system prompt to copy into your LLM assistant.

    You can review your configuration in ${chalk.cyan(CONFIG_FILE_NAME)}.

    `);
            return;
        }
        
        const projectId = await getProjectId(cwd);
        await createConfig(projectId, cwd);
        logger.success(`Created configuration file: ${CONFIG_FILE_NAME}`);
        
        await ensureStateDirExists(cwd);
        logger.success(`Created state directory: ${STATE_DIRECTORY_NAME}/`);

        await updateGitignore(cwd);

        logger.log(getInitMessage(projectId));
    };
approved: true
